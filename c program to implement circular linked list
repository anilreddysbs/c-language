/*c program to implement circular linked list.*/
#include<stdio.h>
#include<conio.h>
#include<alloc.h>
#include<stdlib.h>
struct node
{
 int data;
 struct node *next;
}*head,*tail,*new,*temp,*d;
int value,pos,i;
void create();
void display();
void insert_at_begin();
void insert_at_end();
void insert_at_pos();
void delete_at_begin();
void delete_at_end();
void delete_at_pos();
void count();
void main()
{
 int ch;
 clrscr();
 printf("menu\n");
 while(1)
 {
  printf("enter choice:");
  scanf("%d",&ch);
  switch(ch)
  {
    case 1:create();break;
    case 2:display();break;
    case 3:insert_at_begin();break;
    case 4:insert_at_end();break;
    case 5:insert_at_pos();break;
    case 6:delete_at_begin();break;
    case 7:delete_at_end();break;
    case 8:delete_at_pos();break;
    case 9:count();break;
    default :exit(1);
  }
 }
 getch();
}
void create()
{
 char c;
 do
 {
  new=(struct node*)malloc(sizeof(struct node));
  printf("enter value:");
  scanf("%d",&value);
  new->data=value;
  new->next=NULL;
  if(head==NULL)
  {
   head=new;
   temp=new;
  }
  else
  {
  temp->next=new;
  temp=new;
  new->next=head;
  }
  printf("do u want ot add 1 more node(y/n)?");
  fflush(stdin);
  scanf("%c",&c);
 }while(c=='y');
}
void display()
{
 temp=head;
 while(temp->next!=head)
 {
  printf("%d->",temp->data);
  temp=temp->next;
 }
 printf("%d->\n",temp->data);
}
void insert_at_begin()
{
 new=(struct node*)malloc(sizeof(struct node));
 printf("enter value:");
 scanf("%d",&value);
 temp=head;
 while(temp->next!=head)
  temp=temp->next;
 temp->next=new;
 new->data=value;
 new->next=head;
 head=new;
}
void insert_at_end()
{
 new=(struct node*)malloc(sizeof(struct node));
 printf("enter value:");
 scanf("%d",&value);
 temp=head;
 while(temp->next!=head)
  temp=temp->next;
 temp->next=new;
 new->data=value;
 new->next=head;
}
void insert_at_pos()
{
 new=(struct node*)malloc(sizeof(struct node));
 printf("enter value:");
 scanf("%d", &value);
 new->data=value;
 temp=head;
 printf("enter pos");
 scanf("%d",&pos);
 for(i=1;i<pos-1;i++)
   temp=temp->next;
 new->next=temp->next;
 temp->next=new;
}
void delete_at_begin()
{
 temp=head;
 while(temp->next!=head)
  temp=temp->next;
 d=head;
 printf("deleted node is %d\n",d->data);
 head=head->next;
 temp->next=head;
 d->next=NULL;
 free(d);
}
void delete_at_end()
{
 temp=head;
 while(temp->next->next!=head)
  temp=temp->next;
 d=temp->next;
 printf("deleted node is %d\n",d->data);
 temp->next=head;
 d->next=NULL;
 free(d);
}
void delete_at_pos()
{
 printf("enter pos:");
 scanf("%d",&pos);
 temp=head;
 for(i=0;i<pos-1;i++)
   temp=temp->next;
 temp->next=temp->next->next;
 d=temp->next;
 printf("deleted node is %d\n",d->data);
 d->next=NULL;
 free(d);
}
void count()
{
 int c=0;
 temp=head;
 while(temp->next!=head)
 {
  c++;
  temp=temp->next;
 }
 c++;
 printf("number of nodes in list are:%d\n",c);
}




